export { replacerWithPath };
function replacerWithPath(replacer) {
    const pathMap = new WeakMap();
    return function (key, value) {
        const pathPrevious = pathMap.get(this) ?? [];
        const path = [...pathPrevious];
        if (key !== '') {
            const pathEntry = !Array.isArray(this) ? key : parseInt(key, 10);
            path.push(pathEntry);
        }
        if (isIterable(value))
            pathMap.set(value, path);
        return replacer.call(this, key, value, path);
    };
}
function isIterable(value) {
    return value === Object(value);
}
